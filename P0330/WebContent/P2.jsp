<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import = "java.util.*" %>  <!-- : 클래스 외부에 있는 것을 호출 -->  
<!-- 꺽쇠 바깥 : 웹브라우저로 전달해야 할 문자들 -->    
<%-- jsp문법의 주석  --%>

<%--
<%!
	int a = 10; 컴파일 할 때 주석
	%!는 잘 안씀
%> 
--%>

   
<%! 
	// int a = 10;
	/* 멤버쪽으로 변환 */
	/* syso 안됨*/
%>

<%
	int b = 20;
	System.out.println("xxxxx");
	ArrayList list;
%>    

<%= b %>

<%-- --%>
    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<!-- 안녕하세요..... -->
<%-- 안녕하세요..... --%>
<!-- ! : 웹바르우저 주석, % : 서버 주석 -->
<!-- 두 주석의 차이점은??????? -->
</body>
</html>

<%-- ●JSP는 HTML문서 사이에 JSP문법코드가 삽입된 형태로 작성된다.

●<%   %> - 스크립트릿, 이 안에 자바 코드 쓸수 있다. 

●<%=   %> - 익스프레션, 자바식 출력

●<%@   %> - 지시자, 웹컨테이너가 jsp 페이지를 처리할 때 필요한 정보를 기술

●<%!    %> - 선언부, 변수선언이나 메서드를 선언

●&{ } - 익스프레션 언어(EL)

●<jsp:~~/>, <c:~~/> - 액션 태그

●서블릿
- 장점 : 복잡한 프로그램 구현에 적합하다. 컴파일 결과만 설치해도 되므로 소스코드 유출 보호
- 단점 : HTML 문서의 디자인이 바뀔때 마다 서블릿 클랫를 수정/컴파일/설치 해야하고 웹서버를 재기동하는 일을
           되풀이 해야한다. 설치과정이 복잡하다.

●JSP
- 장점 : HTML중심의 코드구조이므로 디자인 작업에 바로 사용가능하다. 그리고 그 일이 끝나면 바로 프로그램
           로직을 고칠수 있다. 설치 과정이 간단하다
- 단점 : 프로그램 로직이 복잡할 경우 자바코드의 논리적구조를 알아보기가 힘들다. 소스코드가 공개되며,
            프로그래머가 아닌 다른 사람이 소스코드를 만져서 손상시킬 위험성이 있다.

●프로그램의 복잡한 로직을 구사하는 코드는 서블릿 클래스 안에 기술하고 프로그램의 결과를 보여주는 HTML중심의 코드만 JSP페이지안에 기술하는게 좋다.

●실무에서는 JSP페이지에 스크립팅 요스는 아예 쓰지않고 익스프레션언어(EL)와 액션만 사용하는 방법을 주로 쓴다.

출처: https://hyunssssss.tistory.com/61 [현's 블로그] --%>